<?php
/**
 * Copyright (c) 2014 Lukas Reschke <lukas@owncloud.com>
 * This file is licensed under the Affero General Public License version 3 or
 * later.
 * See the COPYING-README file.
 */

namespace OC\Security;

use OCP\ISession;
use OCP\Security\ISecureRandom;

/**
 * Class CSRFHelper provides a simple helper around ownCloud's CSRF protection.
 * The CSRF tokens generated by ownCloud are valid on a per-session base, this means
 * that the token will always be the same for the same user session.
 *
 * For more information about Cross-Site Request Forgery (CSRF) please visit:
 * https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
 *
 * Example usage:
 * $token = \OC::$server->getCSRFHelper()->getToken();
 * $isVerified = \OC::$server->getCSRFHelper()->verify()
 *
 * @package OC\Security
 */
class CSRFHelper {

	/** @var \OCP\ISession */
	private $session;
	/** @var ISecureRandom */
	private $secureRandom;
	/** @var string */
	private $token;

	/**
	 * @param ISession $session
	 * @param ISecureRandom $secureRandom
	 */
	public function __construct(ISession $session,
								ISecureRandom $secureRandom) {
		$this->session = $session;
		$this->secureRandom = $secureRandom;
	}

	/**
	 * Register a CSRF token within the session
	 * @throws \Exception If the token could not get stored
	 */
	public function register() {
		if($this->getToken() !== null) {
			return;
		}

		$token = $this->secureRandom->getMediumStrengthGenerator()->generate(30);
		$this->session->set('requesttoken', $token);
		$this->token = $token;
	}

	/**
	 * Returns the current CSRF token or NULL in case no token is set
	 * @return null|string
	 */
	public function getToken() {
		if(!empty($this->token)) {
			return $this->token;
		}

		$this->token = $this->session->get('requesttoken');
		return $this->token;
	}

	/**
	 * Compares the supplied token with the stored one within the session
	 * @param string $token
	 * @return bool
	 */
	public function verify($token) {
		return StringUtils::equals($this->getToken(), $token);
	}

}